<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>net.civeira.scanner</groupId>
	<artifactId>java</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<properties>
		<java.version>1.8</java.version>
		<maven.compiler.release>1.8</maven.compiler.release>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<project.reporting.sourceEncoding>UTF-8</project.reporting.sourceEncoding>
		<skipITs>true</skipITs>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<version>1.18.28</version>
			<scope>provided</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/us.fatehi/schemacrawler -->
		<dependency>
			<groupId>us.fatehi</groupId>
			<artifactId>schemacrawler</artifactId>
			<version>16.20.4</version>
		</dependency>
		<dependency>
			<groupId>us.fatehi</groupId>
			<artifactId>schemacrawler-diagram</artifactId>
			<version>16.20.4</version>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.postgresql/postgresql -->
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>42.6.0</version>
		</dependency>
		<dependency>
			<groupId>us.fatehi</groupId>
			<artifactId>schemacrawler-postgresql</artifactId>
			<version>16.20.4</version>
		</dependency>
		<dependency>
			<groupId>com.github.javaparser</groupId>
			<artifactId>javaparser-symbol-solver-core</artifactId>
			<version>3.5.17</version>
		</dependency>
	</dependencies>
	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-dependencies</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
							<overWriteReleases>false</overWriteReleases>
							<overWriteSnapshots>false</overWriteSnapshots>
							<overWriteIfNewer>true</overWriteIfNewer>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.3.0</version>
				<configuration>
					<archive>
						<manifest>
							<addClasspath>true</addClasspath>
							<classpathPrefix>lib/</classpathPrefix>
							<mainClass>net.civeira.scanner.java.Main</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
			<plugin>
				<groupId>com.github.wvengen</groupId>
				<artifactId>proguard-maven-plugin</artifactId>
				<version>2.3.1</version>
				<dependencies>
					<dependency>
						<groupId>net.sf.proguard</groupId>
						<artifactId>proguard-base</artifactId>
						<version>6.2.2</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>proguard</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<outjar>${project.build.finalName}.${project.packaging}</outjar>
					<options>
						<option>-keep class net.civeira.scanner.java.Main {
							public static void main(java.lang.String[]);
							}</option>
						<!-- <option>-keepdirectories</option> <option>-keepparameternames</option> -->
						<option>-renamesourcefileattribute SourceFile</option>
						<option>-keepattributes
							Exceptions,InnerClasses,Signature,Deprecated,
							SourceFile,LineNumberTable,*Annotation*,EnclosingMethod
						</option>
						<option>-target 1.8</option>
						<!-- <option>-keep public class * { public protected *; } </option> 
							<option>-keepclassmembernames class * { java.lang.Class class$(java.lang.String); 
							java.lang.Class class$(java.lang.String, boolean); } </option> <option>-keepclasseswithmembernames,includedescriptorclasses 
							class * { native <![CDATA[<methods>]]>; } </option> <option>-keepclassmembers,allowoptimization 
							enum * { public static **[] values(); public static ** valueOf(java.lang.String); 
							} </option> <option>-keepclassmembers class * implements java.io.Serializable 
							{ static final long serialVersionUID; private static final java.io.ObjectStreamField[] 
							serialPersistentFields; private void writeObject(java.io.ObjectOutputStream); 
							private void readObject(java.io.ObjectInputStream); java.lang.Object writeReplace(); 
							java.lang.Object readResolve(); } </option> -->
					</options>
					<libs>
						<!-- <lib> ${java.home}/jmods</lib> -->
						<lib>${java.home}/lib/rt.jar</lib>
						<lib>${java.home}/lib/jsse.jar</lib>
						<lib>${java.home}/lib/jce.jar</lib>
					</libs>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>